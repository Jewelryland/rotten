{
    "contents" : "library(rjson)\nlibrary(stringr)\n\n# population to sample\nall = read.csv(\"working/all.csv\", stringsAsFactors = FALSE)\nall$id = str_replace(samp$const,\"^tt\",\"\")\n\n\n\n# download json files\nsetwd(\"/json\")\n# key = [key]\n# for(i in 1:nrow(samp)){\n#   url1 = \"http://api.rottentomatoes.com/api/public/v1.0/movie_alias.json?id=\"\n#   id = samp$id[i]\n#   url2 = \"&type=imdb&apikey=[key]\"\n#   url = paste(url1,id,url2, sep=\"\")\n#   filename = paste(i,\"_\",id,\".json\", sep=\"\")\n#   download.file(url = url, destfile = filename)\n#   Sys.sleep(1)\n# }\n\nd = subset(samp, select = c(Title,Title.type,Directors,IMDb.Rating,Runtime..mins.,Year,Genres,Num..Votes,Release.Date..month.day.year.,URL,id))\n\nnames(d) = c(\"title\",\"title_type\",\"directors\",\"imdb_rating\",\"runtime\",\"year\",\"genres\",\"num_votes\",\"rel_date\",\"url\",\"id\")\n\n# create new columns\nd$title_rt = NA\nd$year_rt = NA\nd$genre_rt = NA\nd$mpaa_rating = NA\nd$runtime_rt = NA\nd$critics_rating = NA\nd$critics_score = NA\nd$audience_rating = NA\nd$audience_score = NA\nd$actor1 = NA\nd$actor2 = NA\nd$actor3 = NA\nd$actor4 = NA\nd$actor5 = NA\nd$director_rt = NA\nd$studio = NA\nd$link = NA\ndim(d)\n\n# fill in new columns\nsetwd(\"~/Desktop/Teaching/Sta101_F14/Project/Project 2/data/json\")\n\nfor(i in 1:nrow(d)){\n  print(i)\n  filename = paste(i,\"_\",d$id[i],\".json\", sep=\"\")\n  file = fromJSON(file = filename)\n  if(is.null(file$title[i])){\n    d[i,12:26] = NA\n  }\n  if(!is.null(file$title[i])){\n    d$title_rt[i] = file$title\n    d$year_rt[i] = file$year\n    d$genre_rt[i] = ifelse((length(file$genres) == 0), NA, file$genres[1])\n    print(d$genre_rt[i])\n    d$mpaa_rating[i] = file$mpaa_rating\n    d$runtime_rt[i] = file$runtime\n    d$critics_rating[i] = ifelse(is.null(file$ratings$critics_rating), NA, file$ratings$critics_rating)\n    d$critics_score[i] = file$ratings$critics_score\n    d$audience_rating[i] = ifelse(is.null(file$ratings$audience_rating), NA, file$ratings$audience_rating)\n    d$audience_score[i] = file$ratings$audience_score\n    d$actor1[i] = ifelse(length(file$abridged_cast)>=1, file$abridged_cast[[1]]$name, NA)\n    d$actor2[i] = ifelse(length(file$abridged_cast)>=2, file$abridged_cast[[2]]$name, NA)\n    d$actor3[i] = ifelse(length(file$abridged_cast)>=3, file$abridged_cast[[3]]$name, NA)\n    d$actor4[i] = ifelse(length(file$abridged_cast)>=4, file$abridged_cast[[4]]$name, NA)\n    d$actor5[i] = ifelse(length(file$abridged_cast)>=5, file$abridged_cast[[5]]$name, NA)\n    d$director_rt[i] = ifelse(length(file$abridged_directors)>=1, file$abridged_directors[[1]]$name, NA)\n    d$studio[i] = ifelse(is.null(file$studio), NA, file$studio)\n    d$link[i] = file$links$alternate[1]\n  }\n}\n\n# save\nsetwd(\"~/Desktop/Teaching/Sta101_F14/Project/Project 2/data\")\nwrite.csv(d, file = \"d_imdb_rt_raw.csv\", row.names = FALSE)\n\n# get rid of rows where there is no audience or critic score\nd = read.csv(\"d_imdb_rt_raw.csv\", stringsAsFactors = FALSE)\nd = d[-which(is.na(d$critics_score)),]\nd = d[-which(d$critics_score < 0),]\n\n\n# title check - mismatch?\ntitle_check1 = d[which(d$title != d$title_rt),c(1,12)]\n# there are too many, leave for now, may not be important\n\n# runtime check -\n# use IMDB data as truth\nruntime_check1 = d[which(d$runtime != d$runtime_rt),c(1,5,16)] # many mismatch, but by few mins\n\nruntime_check2 = d[which(abs(as.numeric(d$runtime) - as.numeric(d$runtime_rt)) > 20),c(1,5,16)] # some with large differences, but use IMDB as truth\n\n# year check -\n# use IMDB data as truth\nyear_check = d[which(abs(as.numeric(d$year) - as.numeric(d$year_rt)) > 1),c(1,6,13)]\n\n\n# oscar match // best pic nom\nbest_pic_noms = read.csv(\"best_pic_noms.csv\", stringsAsFactors = FALSE)\n\nd$best_pic_nom = \"no\"\nfor(i in 1:nrow(d)){\n  if(d$title[i] %in% best_pic_noms$Title){d$best_pic_nom[i] = \"yes\"}\n}\n\n# oscar match // best pic win\nbest_pic_wins = read.csv(\"best_pic_wins.csv\", stringsAsFactors = FALSE)\n\nd$best_pic_win = \"no\"\nfor(i in 1:nrow(d)){\n  if(d$title[i] %in% best_pic_wins$Title){d$best_pic_win[i] = \"yes\"}\n}\n\n# oscar match // best actor win\nbest_actor_wins = read.csv(\"best_actor_wins.csv\", stringsAsFactors = FALSE)\n\nd$best_actor_win = \"no\"\nfor(i in 1:nrow(d)){\n  if(d$actor1[i] %in% best_actor_wins$name |\n       d$actor2[i] %in% best_actor_wins$name |\n       d$actor3[i] %in% best_actor_wins$name |\n       d$actor4[i] %in% best_actor_wins$name |\n       d$actor5[i] %in% best_actor_wins$name){d$best_actor_win[i] = \"yes\"}\n}\n\n# oscar match // best actress win\nbest_actress_wins = read.csv(\"best_actress_wins.csv\", stringsAsFactors = FALSE)\n\nd$best_actress_win = \"no\"\nfor(i in 1:nrow(d)){\n  if(d$actor1[i] %in% best_actress_wins$name |\n       d$actor2[i] %in% best_actress_wins$name |\n       d$actor3[i] %in% best_actress_wins$name |\n       d$actor4[i] %in% best_actress_wins$name |\n       d$actor5[i] %in% best_actress_wins$name){d$best_actress_win[i] = \"yes\"}\n}\n\n# oscar match // best dir win\nbest_dir_wins = read.csv(\"best_dir_wins.csv\", stringsAsFactors = FALSE)\n\nd$best_dir_win = \"no\"\nfor(i in 1:nrow(d)){\n  if(d$director_rt[i] %in% best_dir_wins$name){d$best_dir_win[i] = \"yes\"}\n}\n\n# top 200 box office match\n# inflation adjusted\n# http://boxofficemojo.com/alltime/adjusted.htm\ninf_ad_bo_top200 = read.csv(\"inf_ad_bo_top200.csv\", stringsAsFactors = FALSE)\n\nwhich(d$title %in% inf_ad_bo_top200$title)\n# none of them are in this list, so don't use this variable\n\n#d$top200_box = \"no\"\n#for(i in 1:nrow(d)){\n#  if(d$title[i] %in% inf_ad_bo_top200$title){d$top200_box[i] = \"yes\"}\n#}\n\n# final dataset\nd_fin = subset(d, select = c(1,20, 2,14,5,6,15,8,18,17,29:33,19,26,21:25,28,10,11))\n\nnames(d_fin) = c(\"title\", \"audience_score\", \"type\", \"genre\", \"runtime\", \"year\", \"mpaa_rating\", \"imdb_num_votes\" , \"critics_score\", \"critics_rating\", \"best_pic_nom\", \"best_pic_win\", \"best_actor_win\", \"best_actress_win\", \"best_dir_win\", \"audience_rating\", \"director\", \"actor1\", \"actor2\", \"actor3\", \"actor4\", \"actor5\", \"rt_url\", \"imdb_url\", \"imdb_id\")\n\nd_fin$title = as.character(d_fin$title)\nd_fin$audience_score = as.numeric(d_fin$audience_score)\nd_fin$type = as.factor(d_fin$type)\nd_fin$genre = as.factor(d_fin$genre)\nd_fin$runtime = as.numeric(d_fin$runtime)\nd_fin$year = as.numeric(d_fin$year)\nd_fin$mpaa_rating = as.factor(d_fin$mpaa_rating)\nd_fin$imdb_num_votes = as.numeric(d_fin$imdb_num_votes)\nd_fin$critics_score = as.numeric(d_fin$critics_score)\nd_fin$critics_rating = as.factor(d_fin$critics_rating)\nd_fin$best_pic_nom = as.factor(d_fin$best_pic_nom)\nd_fin$best_pic_win = as.factor(d_fin$best_pic_win)\nd_fin$best_actor_win = as.factor(d_fin$best_actor_win)\nd_fin$best_actress_win = as.factor(d_fin$best_actress_win)\nd_fin$best_dir_win = as.factor(d_fin$best_dir_win)\n#d_fin$top200_box = as.factor(d_fin$top200_box)\nd_fin$audience_rating = as.factor(d_fin$audience_rating)\nd_fin$director = as.factor(d_fin$director)\nd_fin$actor1 = as.character(d_fin$actor1)\nd_fin$actor2 = as.character(d_fin$actor2)\nd_fin$actor3 = as.character(d_fin$actor3)\nd_fin$actor4 = as.character(d_fin$actor4)\nd_fin$actor5 = as.character(d_fin$actor5)\nd_fin$rt_url = as.character(d_fin$rt_url)\nd_fin$imdb_url = as.character(d_fin$imdb_url)\nd_fin$imdb_id = as.character(d_fin$imdb_id)\n\nd_fin$genre2 = \"Other\"\nd_fin$genre2[d_fin$genre == \"Action & Adventure\"] = \"Action & Adventure\"\nd_fin$genre2[d_fin$genre == \"Comedy\"] = \"Comedy\"\nd_fin$genre2[d_fin$genre == \"Drama\"] = \"Drama\"\nd_fin$genre2[d_fin$genre == \"Horror\"] = \"Horror\"\nd_fin$genre2[d_fin$genre == \"Mystery & Suspense\"] = \"Mystery & Suspense\"\n\nd_fin2 = d_fin\nd_fin2$genre = as.factor(d_fin$genre2)\ndim(d_fin2)\nd_fin2 = d_fin2[,-26]\n\n# final save\nmovies = d_fin2\nsave(movies, file = \"movies.Rdata\")\n\n# model\nm = lm(audience_score ~ critics_score + critics_rating + type + genre + runtime + year + mpaa_rating + imdb_num_votes + best_pic_nom + best_pic_win + best_actor_win + best_actress_win + best_dir_win, data = movies)\nstep(m)\n",
    "created" : 1427477678678.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2228034653",
    "id" : "478B395A",
    "lastKnownWriteTime" : 1427478305,
    "path" : "~/Desktop/Projects/R Packages/rotten/working/rotten.R",
    "project_path" : "working/rotten.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}